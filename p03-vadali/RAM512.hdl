// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    // The exact same logic as RAM64, literally the same thing.
      DMux8Way(in = load, sel = address[6..8], a = a, b = b, c = c, d = d, e = e, f = f, g = g, h = h);
      RAM64(in = in, load = a, address = address[0..5], out = i1);
      RAM64(in = in, load = b, address = address[0..5], out = i2);
      RAM64(in = in, load = c, address = address[0..5], out = i3);
      RAM64(in = in, load = d, address = address[0..5], out = i4);
      RAM64(in = in, load = e, address = address[0..5], out = i5);
      RAM64(in = in, load = f, address = address[0..5], out = i6);
      RAM64(in = in, load = g, address = address[0..5], out = i7);
      RAM64(in = in, load = h, address = address[0..5], out = i8);
  // Like in RAM64, I need to Mux all of these outputs into one output.
      Mux8Way16(a = i1, b = i2, c = i3, d = i4, e = i5, f = i6, g = i7, h = i8, sel = address[6..8], out = out);
}
