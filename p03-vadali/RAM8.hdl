// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    // Since this is RAM8 and I need 8 loads, I need to turn one load into 8.
    // So DMUX8Way is the way to go here.
      DMux8Way(in = load, sel = address, a = a, b = b, c = c, d = d, e = e, f = f, g = g, h = h);
    // Since it is composed of 8-registers, I just make 8 registers and pass in the different loads.
      Register(in = in, load = a, out = i1);
      Register(in = in, load = b, out = i2);
      Register(in = in, load = c, out = i3);
      Register(in = in, load = d, out = i4);
      Register(in = in, load = e, out = i5);
      Register(in = in, load = f, out = i6);
      Register(in = in, load = g, out = i7);
      Register(in = in, load = h, out = i8);
    // I then need to turn these 8 outputs into one output, meaning that Mux8Way16 is coming.
      Mux8Way16(a = i1, b = i2, c = i3, d = i4, e = i5, f = i6, g = i7, h = i8, sel = address, out = out);
}
