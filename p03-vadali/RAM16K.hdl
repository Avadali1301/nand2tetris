// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
    // Almost same concept as RAM4K
    // Since this time the address was only increased by two bits, I use Mux and DMux 4way to use those two bits to choose between the RAM4K that I want to access.
    // Since 16 / 4 = 4, there are only 4 RAM4K's to choose from, thus I only need to use 4.
      DMux4Way(in = load, sel = address[12..13], a = a, b = b, c = c, d = d);
      RAM4K(in = in, load = a, address = address[0..11], out = i1);
      RAM4K(in = in, load = b, address = address[0..11], out = i2);
      RAM4K(in = in, load = c, address = address[0..11], out = i3);
      RAM4K(in = in, load = d, address = address[0..11], out = i4);
// Like in RAM4K, I need to Mux all of these outputs into one output.
      Mux4Way16(a = i1, b = i2, c = i3, d = i4, sel = address[12..13], out = out);
}
